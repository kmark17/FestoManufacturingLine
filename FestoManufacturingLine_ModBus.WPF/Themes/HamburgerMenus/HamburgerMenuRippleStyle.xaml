<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mah="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />

    <!--  This is the template for the menu items.  -->
    <DataTemplate x:Key="MenuItemTemplate" DataType="{x:Type mah:HamburgerMenuIconItem}">
        <Grid Height="48">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type mah:HamburgerMenu}}, Path=CompactPaneLength}" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <ContentControl
                Grid.Column="0"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Content="{Binding Icon}"
                Focusable="False"
                IsTabStop="False" />
            <TextBlock
                Grid.Column="1"
                VerticalAlignment="Center"
                FontSize="16"
                Text="{Binding Label}" />
        </Grid>
    </DataTemplate>

    <!--  Menu item style  -->
    <Style
        x:Key="MahApps.Styles.ListBoxItem.HamburgerMenuItem.Ripple"
        BasedOn="{StaticResource MahApps.Styles.ListBoxItem.HamburgerMenuItem}"
        TargetType="{x:Type ListBoxItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Grid
                        x:Name="RootGrid"
                        Background="Transparent"
                        RenderOptions.ClearTypeHint="{TemplateBinding RenderOptions.ClearTypeHint}">
                        <Border
                            x:Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Grid Margin="{TemplateBinding BorderThickness}">
                            <Grid
                                HorizontalAlignment="Left"
                                VerticalAlignment="Center"
                                Visibility="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type mah:HamburgerMenu}}, Path=ShowSelectionIndicator, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}">
                                <Rectangle
                                    x:Name="SelectionIndicator"
                                    Width="3.5"
                                    Height="48"
                                    Fill="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.SelectedForegroundBrush), Mode=OneWay}"
                                    Focusable="False"
                                    Opacity="0.0" />
                            </Grid>
                            <materialDesign:Ripple
                                x:Name="ContentPresenter"
                                Padding="{TemplateBinding Padding}"
                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                Content="{TemplateBinding Content}"
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                Feedback="{DynamicResource MahApps.Brushes.Gray.MouseOver}"
                                Focusable="False"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Grid>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.SelectedBackgroundBrush), Mode=OneWay}" />
                            <Setter TargetName="ContentPresenter" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.SelectedForegroundBrush), Mode=OneWay}" />
                            <Setter TargetName="SelectionIndicator" Property="Opacity" Value="1.0" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="Selector.IsSelectionActive" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.ActiveSelectionBackgroundBrush), Mode=OneWay}" />
                            <Setter TargetName="ContentPresenter" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.ActiveSelectionForegroundBrush), Mode=OneWay}" />
                            <Setter TargetName="SelectionIndicator" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.ActiveSelectionForegroundBrush), Mode=OneWay}" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.HoverSelectedBackgroundBrush), Mode=OneWay}" />
                            <Setter TargetName="ContentPresenter" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.HoverSelectedForegroundBrush), Mode=OneWay}" />
                            <Setter TargetName="SelectionIndicator" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.HoverSelectedForegroundBrush), Mode=OneWay}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.HoverBackgroundBrush), Mode=OneWay}" />
                            <Setter TargetName="ContentPresenter" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.HoverForegroundBrush), Mode=OneWay}" />
                            <Setter TargetName="SelectionIndicator" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.HoverForegroundBrush), Mode=OneWay}" />
                        </MultiTrigger>

                        <Trigger Property="mah:ItemHelper.IsMouseLeftButtonPressed" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.MouseLeftButtonPressedBackgroundBrush), Mode=OneWay}" />
                            <Setter TargetName="ContentPresenter" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.MouseLeftButtonPressedForegroundBrush), Mode=OneWay}" />
                        </Trigger>
                        <Trigger Property="mah:ItemHelper.IsMouseRightButtonPressed" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.MouseRightButtonPressedBackgroundBrush), Mode=OneWay}" />
                            <Setter TargetName="ContentPresenter" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.MouseRightButtonPressedForegroundBrush), Mode=OneWay}" />
                            <Setter TargetName="SelectionIndicator" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.MouseLeftButtonPressedForegroundBrush), Mode=OneWay}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.DisabledBackgroundBrush), Mode=OneWay}" />
                            <Setter TargetName="ContentPresenter" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.DisabledForegroundBrush), Mode=OneWay}" />
                            <Setter TargetName="RootGrid" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background, Mode=OneWay}" />
                            <Setter TargetName="SelectionIndicator" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.DisabledForegroundBrush), Mode=OneWay}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.DisabledSelectedBackgroundBrush), Mode=OneWay}" />
                            <Setter TargetName="ContentPresenter" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.DisabledSelectedForegroundBrush), Mode=OneWay}" />
                            <Setter TargetName="SelectionIndicator" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.DisabledSelectedForegroundBrush), Mode=OneWay}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="mah:ItemHelper.ActiveSelectionBackgroundBrush" Value="Transparent" />
        <Setter Property="mah:ItemHelper.ActiveSelectionForegroundBrush" Value="{DynamicResource MahApps.Brushes.AccentBase}" />
        <Setter Property="mah:ItemHelper.DisabledForegroundBrush" Value="{DynamicResource MahApps.Brushes.Gray}" />
        <Setter Property="mah:ItemHelper.DisabledSelectedBackgroundBrush" Value="Transparent" />
        <Setter Property="mah:ItemHelper.DisabledSelectedForegroundBrush" Value="{DynamicResource MahApps.Brushes.Gray}" />
        <Setter Property="mah:ItemHelper.HoverBackgroundBrush" Value="{DynamicResource MahApps.Brushes.Gray.SemiTransparent}" />
        <Setter Property="mah:ItemHelper.HoverSelectedBackgroundBrush" Value="{DynamicResource MahApps.Brushes.Gray.SemiTransparent}" />
        <Setter Property="mah:ItemHelper.HoverSelectedForegroundBrush" Value="{DynamicResource MahApps.Brushes.AccentBase}" />
        <Setter Property="mah:ItemHelper.SelectedBackgroundBrush" Value="Transparent" />
        <Setter Property="mah:ItemHelper.SelectedForegroundBrush" Value="{DynamicResource MahApps.Brushes.AccentBase}" />
    </Style>

    <!--  Seperator item style  -->
    <Style
        x:Key="MahApps.Styles.ListBoxItem.HamburgerMenuSeparator.Ripple"
        BasedOn="{StaticResource MahApps.Styles.ListBoxItem.HamburgerBase}"
        TargetType="{x:Type ListBoxItem}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsHitTestVisible" Value="True" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Margin" Value="30,20,30,20" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Grid Background="{TemplateBinding Background}" RenderOptions.ClearTypeHint="{TemplateBinding RenderOptions.ClearTypeHint}">
                        <Separator
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Actual style  -->
    <Style x:Key="MahApps.Styles.HamburgerMenu.Ripple" TargetType="{x:Type mah:HamburgerMenu}">
        <Setter Property="ItemContainerStyle" Value="{DynamicResource MahApps.Styles.ListBoxItem.HamburgerMenuItem.Ripple}" />
        <Setter Property="OptionsItemContainerStyle" Value="{DynamicResource MahApps.Styles.ListBoxItem.HamburgerMenuItem.Ripple}" />
        <Setter Property="SeparatorItemContainerStyle" Value="{DynamicResource MahApps.Styles.ListBoxItem.HamburgerMenuSeparator.Ripple}" />
        <Setter Property="PaneBackground" Value="{DynamicResource MahApps.Brushes.ThemeBackground}" />
        <Setter Property="PaneForeground" Value="{DynamicResource MahApps.Brushes.Text}" />
        <Setter Property="ShowSelectionIndicator" Value="True" />
        <Setter Property="Template" Value="{DynamicResource MahApps.Templates.HamburgerMenu.Ripple}" />
        <Style.Triggers>
            <EventTrigger RoutedEvent="Loaded">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation
                            Storyboard.TargetProperty="Opacity"
                            From="0.5"
                            To="1.0"
                            Duration="0:0:1" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <!--  Pane style settings  -->
    <ControlTemplate x:Key="MahApps.Templates.HamburgerMenu.Ripple" TargetType="{x:Type mah:HamburgerMenu}">
        <Grid>
            <mah:SplitView
                x:Name="MainSplitView"
                CanResizeOpenPane="{TemplateBinding CanResizeOpenPane}"
                CompactPaneLength="{TemplateBinding CompactPaneLength}"
                DisplayMode="{TemplateBinding DisplayMode}"
                IsPaneOpen="{Binding IsPaneOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                IsTabStop="False"
                MaximumOpenPaneLength="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=MaximumOpenPaneLength}"
                MinimumOpenPaneLength="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=MinimumOpenPaneLength}"
                OpenPaneLength="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=OpenPaneLength, Mode=TwoWay}"
                PaneBackground="{TemplateBinding PaneBackground}"
                PaneForeground="{TemplateBinding PaneForeground}"
                PanePlacement="{TemplateBinding PanePlacement}"
                ResizeThumbStyle="{TemplateBinding ResizeThumbStyle}">
                <mah:SplitView.Pane>
                    <Grid x:Name="PaneGrid" Margin="{TemplateBinding PaneMargin}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <DockPanel
                            x:Name="PaneHeader"
                            Grid.Row="0"
                            Margin="{TemplateBinding PaneHeaderMargin}"
                            LastChildFill="True">
                            <Grid
                                x:Name="HamburgerButtonSpace"
                                Width="{TemplateBinding HamburgerWidth}"
                                Height="{TemplateBinding HamburgerHeight}"
                                Margin="{TemplateBinding HamburgerMargin}"
                                DockPanel.Dock="Left"
                                Visibility="{TemplateBinding HamburgerVisibility}" />
                            <ContentControl
                                x:Name="PaneHeaderContent"
                                VerticalAlignment="Stretch"
                                ContentTemplate="{TemplateBinding HamburgerMenuHeaderTemplate}"
                                IsTabStop="False" />
                        </DockPanel>

                        <mah:HamburgerMenuListBox
                            x:Name="ButtonsListView"
                            Grid.Row="1"
                            Width="{TemplateBinding OpenPaneLength}"
                            mah:ScrollViewerHelper.VerticalScrollBarOnLeftSide="{TemplateBinding VerticalScrollBarOnLeftSide}"
                            AutomationProperties.Name="Menu items"
                            Foreground="{TemplateBinding PaneForeground}"
                            IsTextSearchEnabled="False"
                            ItemContainerStyleSelector="{StaticResource HamburgerMenuItemStyleSelector}"
                            ItemTemplate="{TemplateBinding ItemTemplate}"
                            ItemTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                            ItemsSource="{TemplateBinding ItemsSource}"
                            ScrollViewer.VerticalScrollBarVisibility="Auto"
                            SelectedIndex="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectedIndex, Mode=TwoWay}"
                            SelectedItem="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectedItem, Mode=TwoWay}"
                            SelectionMode="Single"
                            TabIndex="1" />
                        <mah:HamburgerMenuListBox
                            x:Name="OptionsListView"
                            Grid.Row="2"
                            Width="{TemplateBinding OpenPaneLength}"
                            Margin="0,20,0,0"
                            VerticalAlignment="Bottom"
                            AutomationProperties.Name="Option items"
                            Foreground="{TemplateBinding PaneForeground}"
                            IsTextSearchEnabled="False"
                            ItemContainerStyleSelector="{StaticResource HamburgerMenuItemOptionsStyleSelector}"
                            ItemTemplate="{TemplateBinding OptionsItemTemplate}"
                            ItemTemplateSelector="{TemplateBinding OptionsItemTemplateSelector}"
                            ItemsSource="{TemplateBinding OptionsItemsSource}"
                            ScrollViewer.VerticalScrollBarVisibility="Disabled"
                            SelectedIndex="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectedOptionsIndex, Mode=TwoWay}"
                            SelectedItem="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectedOptionsItem, Mode=TwoWay}"
                            SelectionMode="Single"
                            TabIndex="2" />
                    </Grid>
                </mah:SplitView.Pane>
                <mah:TransitioningContentControl
                    x:Name="ContentPart"
                    Padding="{TemplateBinding Padding}"
                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                    AutomationProperties.Name="Content"
                    Content="{TemplateBinding Content}"
                    ContentStringFormat="{TemplateBinding ContentStringFormat}"
                    ContentTemplate="{TemplateBinding ContentTemplate}"
                    ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                    RestartTransitionOnContentChange="True"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                    Transition="{TemplateBinding ContentTransition}" />
            </mah:SplitView>
            <Button
                x:Name="HamburgerButton"
                Width="{TemplateBinding HamburgerWidth}"
                Height="{TemplateBinding HamburgerHeight}"
                Margin="{TemplateBinding HamburgerMargin}"
                HorizontalAlignment="Left"
                VerticalAlignment="Top"
                AutomationProperties.AutomationId="HamburgerButton"
                AutomationProperties.HelpText="{TemplateBinding HamburgerButtonHelpText}"
                AutomationProperties.Name="{TemplateBinding HamburgerButtonName}"
                ContentTemplate="{TemplateBinding HamburgerButtonTemplate}"
                Foreground="{TemplateBinding PaneForeground}"
                IsTabStop="{TemplateBinding IsTabStop}"
                Style="{TemplateBinding HamburgerButtonStyle}"
                TabIndex="0"
                Visibility="{TemplateBinding HamburgerVisibility}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="PanePlacement" Value="Right">
                <Setter TargetName="HamburgerButton" Property="HorizontalAlignment" Value="Right" />
                <Setter TargetName="HamburgerButtonSpace" Property="DockPanel.Dock" Value="Right" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
</ResourceDictionary>